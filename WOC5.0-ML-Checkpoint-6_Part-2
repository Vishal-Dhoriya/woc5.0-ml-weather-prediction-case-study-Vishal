{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNxPpRYdHddqzKPC7x703dq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Vishal-Dhoriya/woc5.0-ml-weather-prediction-case-study-Vishal/blob/main/WOC5.0-ML-Checkpoint-6_Part-2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##note : tried doing post prunning but as our dataset is too large thus i am not able to do that so now we will try for pre- prunning in other code"
      ],
      "metadata": {
        "id": "oqlXZmuqqPu1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VAI6X1P4mH4W"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import numpy as np\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "e-z64GfxmOUT",
        "outputId": "5648af29-f732-4292-e1ff-bcaeef99b079"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-cd6f7532-026e-4326-bd86-b5ae99322c91\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-cd6f7532-026e-4326-bd86-b5ae99322c91\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving weather.csv to weather.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "wp = pd.read_csv('/content/weather.csv')\n",
        "wp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "3tATKlJ2mQcy",
        "outputId": "75c8018b-e408-4c84-e853-1eaeff21fe43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      precipitation  temp_max  temp_min  wind  weather\n",
              "0               0.0      12.8       5.0   4.7  drizzle\n",
              "1              10.9      10.6       2.8   4.5     rain\n",
              "2               0.8      11.7       7.2   2.3     rain\n",
              "3              20.3      12.2       5.6   4.7     rain\n",
              "4               1.3       8.9       2.8   6.1     rain\n",
              "...             ...       ...       ...   ...      ...\n",
              "1456            8.6       4.4       1.7   2.9     rain\n",
              "1457            1.5       5.0       1.7   1.3     rain\n",
              "1458            0.0       7.2       0.6   2.6      fog\n",
              "1459            0.0       5.6      -1.0   3.4      sun\n",
              "1460            0.0       5.6      -2.1   3.5      sun\n",
              "\n",
              "[1461 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b7fa1fd-73e4-4c95-8d59-8a6eafdbe70e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>precipitation</th>\n",
              "      <th>temp_max</th>\n",
              "      <th>temp_min</th>\n",
              "      <th>wind</th>\n",
              "      <th>weather</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>12.8</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>drizzle</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10.9</td>\n",
              "      <td>10.6</td>\n",
              "      <td>2.8</td>\n",
              "      <td>4.5</td>\n",
              "      <td>rain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.8</td>\n",
              "      <td>11.7</td>\n",
              "      <td>7.2</td>\n",
              "      <td>2.3</td>\n",
              "      <td>rain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>20.3</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5.6</td>\n",
              "      <td>4.7</td>\n",
              "      <td>rain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.3</td>\n",
              "      <td>8.9</td>\n",
              "      <td>2.8</td>\n",
              "      <td>6.1</td>\n",
              "      <td>rain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1456</th>\n",
              "      <td>8.6</td>\n",
              "      <td>4.4</td>\n",
              "      <td>1.7</td>\n",
              "      <td>2.9</td>\n",
              "      <td>rain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1457</th>\n",
              "      <td>1.5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.7</td>\n",
              "      <td>1.3</td>\n",
              "      <td>rain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1458</th>\n",
              "      <td>0.0</td>\n",
              "      <td>7.2</td>\n",
              "      <td>0.6</td>\n",
              "      <td>2.6</td>\n",
              "      <td>fog</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1459</th>\n",
              "      <td>0.0</td>\n",
              "      <td>5.6</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>3.4</td>\n",
              "      <td>sun</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1460</th>\n",
              "      <td>0.0</td>\n",
              "      <td>5.6</td>\n",
              "      <td>-2.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>sun</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1461 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b7fa1fd-73e4-4c95-8d59-8a6eafdbe70e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1b7fa1fd-73e4-4c95-8d59-8a6eafdbe70e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1b7fa1fd-73e4-4c95-8d59-8a6eafdbe70e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X =wp.iloc[:,:-1]\n",
        "y = wp.iloc[:,-1]"
      ],
      "metadata": {
        "id": "OReW-QWPm1ac"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X,y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cH1J7VY2nBSq",
        "outputId": "a7825e0a-1436-4d4d-c89a-24c1131b21ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(      precipitation  temp_max  temp_min  wind\n",
              " 0               0.0      12.8       5.0   4.7\n",
              " 1              10.9      10.6       2.8   4.5\n",
              " 2               0.8      11.7       7.2   2.3\n",
              " 3              20.3      12.2       5.6   4.7\n",
              " 4               1.3       8.9       2.8   6.1\n",
              " ...             ...       ...       ...   ...\n",
              " 1456            8.6       4.4       1.7   2.9\n",
              " 1457            1.5       5.0       1.7   1.3\n",
              " 1458            0.0       7.2       0.6   2.6\n",
              " 1459            0.0       5.6      -1.0   3.4\n",
              " 1460            0.0       5.6      -2.1   3.5\n",
              " \n",
              " [1461 rows x 4 columns], 0       drizzle\n",
              " 1          rain\n",
              " 2          rain\n",
              " 3          rain\n",
              " 4          rain\n",
              "          ...   \n",
              " 1456       rain\n",
              " 1457       rain\n",
              " 1458        fog\n",
              " 1459        sun\n",
              " 1460        sun\n",
              " Name: weather, Length: 1461, dtype: object)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split \n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        " X, y, test_size=0.25, random_state=42)"
      ],
      "metadata": {
        "id": "XYH6vpYdnP8Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "#post prunning\n",
        "#-----> initial code------>>>>>>>mytree = DecisionTreeClassifier()---------<<<<\n",
        "#initially we did not have any parameters to pass into the tree but after plotting \n",
        "#and visualizing it we have decided a parameter to restrict the tree and get the \n",
        "#same result at the same time ,, thus this process is called post pruning as we \n",
        "# hav decided it after visualizing / lotting the tree\n",
        "\n",
        "\n",
        "#code for prunning or we can say for post prunning is as follows in which we have \n",
        "#added a parameter\n",
        "mytree = DecisionTreeClassifier()\n"
      ],
      "metadata": {
        "id": "ijVxOs5emTdv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mytree.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yFOY2psAno5m",
        "outputId": "ffbfa622-443d-4654-87e3-f61589c53f17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier()"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import tree\n",
        "plt.figure(figsize=(15,10))\n",
        "tree.plot_tree(mytree,filled =True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fJNtWpd_nuvk",
        "outputId": "1134c1ef-5abe-441b-efcd-eb75204e6321"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0.6393823229750382, 0.9736842105263158, 'X[0] <= 0.15\\ngini = 0.607\\nsamples = 1095\\nvalue = [42, 71, 480, 18, 484]'),\n",
              " Text(0.33223382577687216, 0.9210526315789473, 'X[3] <= 1.95\\ngini = 0.392\\nsamples = 631\\nvalue = [42, 71, 34, 0, 484]'),\n",
              " Text(0.13648497198166074, 0.868421052631579, 'X[1] <= 4.7\\ngini = 0.55\\nsamples = 130\\nvalue = [17, 27, 5, 0, 81]'),\n",
              " Text(0.11851248089658686, 0.8157894736842105, 'X[2] <= -1.9\\ngini = 0.48\\nsamples = 10\\nvalue = [6, 0, 0, 0, 4]'),\n",
              " Text(0.11329597554763118, 0.7631578947368421, 'X[3] <= 1.75\\ngini = 0.32\\nsamples = 5\\nvalue = [1, 0, 0, 0, 4]'),\n",
              " Text(0.1080794701986755, 0.7105263157894737, 'gini = 0.0\\nsamples = 4\\nvalue = [0, 0, 0, 0, 4]'),\n",
              " Text(0.11851248089658686, 0.7105263157894737, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.12372898624554254, 0.7631578947368421, 'gini = 0.0\\nsamples = 5\\nvalue = [5, 0, 0, 0, 0]'),\n",
              " Text(0.15445746306673458, 0.8157894736842105, 'X[3] <= 0.95\\ngini = 0.528\\nsamples = 120\\nvalue = [11, 27, 5, 0, 77]'),\n",
              " Text(0.1492409577177789, 0.7631578947368421, 'gini = 0.0\\nsamples = 10\\nvalue = [0, 0, 0, 0, 10]'),\n",
              " Text(0.15967396841569026, 0.7631578947368421, 'X[1] <= 24.15\\ngini = 0.557\\nsamples = 110\\nvalue = [11, 27, 5, 0, 67]'),\n",
              " Text(0.12894549159449822, 0.7105263157894737, 'X[2] <= 9.7\\ngini = 0.578\\nsamples = 95\\nvalue = [9, 26, 5, 0, 55]'),\n",
              " Text(0.10139582272032603, 0.6578947368421053, 'X[1] <= 16.4\\ngini = 0.531\\nsamples = 73\\nvalue = [7, 15, 4, 0, 47]'),\n",
              " Text(0.08542027508914926, 0.6052631578947368, 'X[2] <= 8.05\\ngini = 0.595\\nsamples = 54\\nvalue = [6, 13, 4, 0, 31]'),\n",
              " Text(0.06911869587366276, 0.5526315789473685, 'X[1] <= 15.3\\ngini = 0.554\\nsamples = 50\\nvalue = [4, 11, 4, 0, 31]'),\n",
              " Text(0.0521650534895568, 0.5, 'X[1] <= 9.15\\ngini = 0.537\\nsamples = 45\\nvalue = [4, 8, 4, 0, 29]'),\n",
              " Text(0.0391237901171676, 0.4473684210526316, 'X[2] <= 3.6\\ngini = 0.66\\nsamples = 20\\nvalue = [2, 4, 4, 0, 10]'),\n",
              " Text(0.03390728476821192, 0.39473684210526316, 'X[1] <= 8.6\\ngini = 0.581\\nsamples = 17\\nvalue = [2, 4, 1, 0, 10]'),\n",
              " Text(0.02869077941925624, 0.34210526315789475, 'X[1] <= 7.5\\ngini = 0.531\\nsamples = 16\\nvalue = [2, 4, 0, 0, 10]'),\n",
              " Text(0.02347427407030056, 0.2894736842105263, 'X[2] <= -1.1\\ngini = 0.611\\nsamples = 12\\nvalue = [2, 4, 0, 0, 6]'),\n",
              " Text(0.01043301069791136, 0.23684210526315788, 'X[1] <= 6.4\\ngini = 0.375\\nsamples = 4\\nvalue = [1, 0, 0, 0, 3]'),\n",
              " Text(0.00521650534895568, 0.18421052631578946, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 0, 3]'),\n",
              " Text(0.01564951604686704, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.03651553744268976, 0.23684210526315788, 'X[3] <= 1.6\\ngini = 0.594\\nsamples = 8\\nvalue = [1, 4, 0, 0, 3]'),\n",
              " Text(0.0260825267447784, 0.18421052631578946, 'X[2] <= 0.05\\ngini = 0.48\\nsamples = 5\\nvalue = [0, 2, 0, 0, 3]'),\n",
              " Text(0.02086602139582272, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.03129903209373408, 0.13157894736842105, 'X[1] <= 6.4\\ngini = 0.375\\nsamples = 4\\nvalue = [0, 1, 0, 0, 3]'),\n",
              " Text(0.0260825267447784, 0.07894736842105263, 'X[3] <= 1.35\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 1, 0, 0, 1]'),\n",
              " Text(0.02086602139582272, 0.02631578947368421, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.03129903209373408, 0.02631578947368421, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.03651553744268976, 0.07894736842105263, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.04694854814060112, 0.18421052631578946, 'X[2] <= 1.15\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 2, 0, 0, 0]'),\n",
              " Text(0.04173204279164544, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.0521650534895568, 0.13157894736842105, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.03390728476821192, 0.2894736842105263, 'gini = 0.0\\nsamples = 4\\nvalue = [0, 0, 0, 0, 4]'),\n",
              " Text(0.0391237901171676, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.04434029546612328, 0.39473684210526316, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 3, 0, 0]'),\n",
              " Text(0.065206316861946, 0.4473684210526316, 'X[3] <= 1.25\\ngini = 0.39\\nsamples = 25\\nvalue = [2, 4, 0, 0, 19]'),\n",
              " Text(0.05477330616403464, 0.39473684210526316, 'X[1] <= 11.95\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 2, 0, 0, 1]'),\n",
              " Text(0.04955680081507896, 0.34210526315789475, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.05998981151299032, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.07563932755985736, 0.39473684210526316, 'X[2] <= 3.6\\ngini = 0.314\\nsamples = 22\\nvalue = [2, 2, 0, 0, 18]'),\n",
              " Text(0.07042282221090168, 0.34210526315789475, 'gini = 0.0\\nsamples = 9\\nvalue = [0, 0, 0, 0, 9]'),\n",
              " Text(0.08085583290881304, 0.34210526315789475, 'X[2] <= 5.3\\ngini = 0.473\\nsamples = 13\\nvalue = [2, 2, 0, 0, 9]'),\n",
              " Text(0.07042282221090168, 0.2894736842105263, 'X[2] <= 4.15\\ngini = 0.625\\nsamples = 4\\nvalue = [1, 2, 0, 0, 1]'),\n",
              " Text(0.065206316861946, 0.23684210526315788, 'X[1] <= 11.7\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.05998981151299032, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.07042282221090168, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.07563932755985736, 0.23684210526315788, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.0912888436067244, 0.2894736842105263, 'X[3] <= 1.35\\ngini = 0.198\\nsamples = 9\\nvalue = [1, 0, 0, 0, 8]'),\n",
              " Text(0.08607233825776872, 0.23684210526315788, 'X[1] <= 14.15\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.08085583290881304, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.0912888436067244, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.09650534895568008, 0.23684210526315788, 'gini = 0.0\\nsamples = 7\\nvalue = [0, 0, 0, 0, 7]'),\n",
              " Text(0.08607233825776872, 0.5, 'X[3] <= 1.65\\ngini = 0.48\\nsamples = 5\\nvalue = [0, 3, 0, 0, 2]'),\n",
              " Text(0.08085583290881304, 0.4473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.0912888436067244, 0.4473684210526316, 'X[2] <= 7.25\\ngini = 0.375\\nsamples = 4\\nvalue = [0, 3, 0, 0, 1]'),\n",
              " Text(0.08607233825776872, 0.39473684210526316, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.09650534895568008, 0.39473684210526316, 'X[3] <= 1.75\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 1, 0, 0, 1]'),\n",
              " Text(0.0912888436067244, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.10172185430463576, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.10172185430463576, 0.5526315789473685, 'X[1] <= 13.3\\ngini = 0.5\\nsamples = 4\\nvalue = [2, 2, 0, 0, 0]'),\n",
              " Text(0.09650534895568008, 0.5, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.10693835965359144, 0.5, 'X[3] <= 1.45\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 2, 0, 0, 0]'),\n",
              " Text(0.10172185430463576, 0.4473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.11215486500254712, 0.4473684210526316, 'X[1] <= 15.25\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 1, 0, 0, 0]'),\n",
              " Text(0.10693835965359144, 0.39473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.1173713703515028, 0.39473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.1173713703515028, 0.6052631578947368, 'X[2] <= 4.75\\ngini = 0.277\\nsamples = 19\\nvalue = [1, 2, 0, 0, 16]'),\n",
              " Text(0.11215486500254712, 0.5526315789473685, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.12258787570045848, 0.5526315789473685, 'X[2] <= 9.15\\ngini = 0.204\\nsamples = 18\\nvalue = [1, 1, 0, 0, 16]'),\n",
              " Text(0.1173713703515028, 0.5, 'gini = 0.0\\nsamples = 13\\nvalue = [0, 0, 0, 0, 13]'),\n",
              " Text(0.12780438104941416, 0.5, 'X[3] <= 1.45\\ngini = 0.56\\nsamples = 5\\nvalue = [1, 1, 0, 0, 3]'),\n",
              " Text(0.12258787570045848, 0.4473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.13302088639836984, 0.4473684210526316, 'X[1] <= 20.8\\ngini = 0.375\\nsamples = 4\\nvalue = [1, 0, 0, 0, 3]'),\n",
              " Text(0.12780438104941416, 0.39473684210526316, 'X[3] <= 1.75\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.12258787570045848, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.13302088639836984, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.13823739174732552, 0.39473684210526316, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.1564951604686704, 0.6578947368421053, 'X[1] <= 19.15\\ngini = 0.607\\nsamples = 22\\nvalue = [2, 11, 1, 0, 8]'),\n",
              " Text(0.15127865511971472, 0.6052631578947368, 'gini = 0.0\\nsamples = 4\\nvalue = [0, 4, 0, 0, 0]'),\n",
              " Text(0.16171166581762608, 0.6052631578947368, 'X[1] <= 23.05\\ngini = 0.636\\nsamples = 18\\nvalue = [2, 7, 1, 0, 8]'),\n",
              " Text(0.14867040244523688, 0.5526315789473685, 'X[2] <= 10.3\\ngini = 0.521\\nsamples = 13\\nvalue = [1, 4, 0, 0, 8]'),\n",
              " Text(0.1434538970962812, 0.5, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.15388690779419256, 0.5, 'X[2] <= 12.5\\ngini = 0.43\\nsamples = 11\\nvalue = [1, 2, 0, 0, 8]'),\n",
              " Text(0.14867040244523688, 0.4473684210526316, 'gini = 0.0\\nsamples = 6\\nvalue = [0, 0, 0, 0, 6]'),\n",
              " Text(0.15910341314314824, 0.4473684210526316, 'X[1] <= 21.95\\ngini = 0.64\\nsamples = 5\\nvalue = [1, 2, 0, 0, 2]'),\n",
              " Text(0.14867040244523688, 0.39473684210526316, 'X[3] <= 1.6\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 2, 0, 0, 1]'),\n",
              " Text(0.1434538970962812, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.15388690779419256, 0.34210526315789475, 'X[1] <= 21.15\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 1, 0, 0, 1]'),\n",
              " Text(0.14867040244523688, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.15910341314314824, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.1695364238410596, 0.39473684210526316, 'X[2] <= 13.05\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.16431991849210392, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.17475292919001528, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.17475292919001528, 0.5526315789473685, 'X[2] <= 10.3\\ngini = 0.56\\nsamples = 5\\nvalue = [1, 3, 1, 0, 0]'),\n",
              " Text(0.1695364238410596, 0.5, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.17996943453897096, 0.5, 'X[3] <= 1.85\\ngini = 0.375\\nsamples = 4\\nvalue = [1, 3, 0, 0, 0]'),\n",
              " Text(0.17475292919001528, 0.4473684210526316, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.18518593988792664, 0.4473684210526316, 'X[2] <= 11.95\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 1, 0, 0, 0]'),\n",
              " Text(0.17996943453897096, 0.39473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.19040244523688232, 0.39473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.19040244523688232, 0.7105263157894737, 'X[2] <= 13.6\\ngini = 0.338\\nsamples = 15\\nvalue = [2, 1, 0, 0, 12]'),\n",
              " Text(0.18518593988792664, 0.6578947368421053, 'gini = 0.0\\nsamples = 6\\nvalue = [0, 0, 0, 0, 6]'),\n",
              " Text(0.195618950585838, 0.6578947368421053, 'X[2] <= 14.7\\ngini = 0.494\\nsamples = 9\\nvalue = [2, 1, 0, 0, 6]'),\n",
              " Text(0.19040244523688232, 0.6052631578947368, 'X[3] <= 1.65\\ngini = 0.444\\nsamples = 3\\nvalue = [2, 1, 0, 0, 0]'),\n",
              " Text(0.18518593988792664, 0.5526315789473685, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.195618950585838, 0.5526315789473685, 'gini = 0.0\\nsamples = 2\\nvalue = [2, 0, 0, 0, 0]'),\n",
              " Text(0.20083545593479368, 0.6052631578947368, 'gini = 0.0\\nsamples = 6\\nvalue = [0, 0, 0, 0, 6]'),\n",
              " Text(0.5279826795720836, 0.868421052631579, 'X[1] <= 18.6\\ngini = 0.339\\nsamples = 501\\nvalue = [25, 44, 29, 0, 403]'),\n",
              " Text(0.2938359653591442, 0.8157894736842105, 'X[2] <= 0.3\\ngini = 0.444\\nsamples = 202\\nvalue = [11, 22, 22, 0, 147]'),\n",
              " Text(0.21648497198166072, 0.7631578947368421, 'X[3] <= 2.15\\ngini = 0.064\\nsamples = 30\\nvalue = [1, 0, 0, 0, 29]'),\n",
              " Text(0.21126846663270504, 0.7105263157894737, 'X[3] <= 2.05\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 0, 0, 0, 2]'),\n",
              " Text(0.20605196128374936, 0.6578947368421053, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.21648497198166072, 0.6578947368421053, 'X[2] <= -0.3\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.21126846663270504, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.2217014773306164, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.2217014773306164, 0.7105263157894737, 'gini = 0.0\\nsamples = 27\\nvalue = [0, 0, 0, 0, 27]'),\n",
              " Text(0.3711869587366276, 0.7631578947368421, 'X[1] <= 8.6\\ngini = 0.493\\nsamples = 172\\nvalue = [10, 22, 22, 0, 118]'),\n",
              " Text(0.2477840040753948, 0.7105263157894737, 'X[2] <= 0.85\\ngini = 0.675\\nsamples = 20\\nvalue = [1, 7, 4, 0, 8]'),\n",
              " Text(0.23735099337748344, 0.6578947368421053, 'X[3] <= 2.4\\ngini = 0.278\\nsamples = 6\\nvalue = [0, 5, 1, 0, 0]'),\n",
              " Text(0.23213448802852776, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.24256749872643912, 0.6052631578947368, 'gini = 0.0\\nsamples = 5\\nvalue = [0, 5, 0, 0, 0]'),\n",
              " Text(0.25821701477330616, 0.6578947368421053, 'X[2] <= 3.05\\ngini = 0.602\\nsamples = 14\\nvalue = [1, 2, 3, 0, 8]'),\n",
              " Text(0.2530005094243505, 0.6052631578947368, 'X[1] <= 6.65\\ngini = 0.678\\nsamples = 11\\nvalue = [1, 2, 3, 0, 5]'),\n",
              " Text(0.2477840040753948, 0.5526315789473685, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.25821701477330616, 0.5526315789473685, 'X[1] <= 7.5\\ngini = 0.716\\nsamples = 9\\nvalue = [1, 2, 3, 0, 3]'),\n",
              " Text(0.2530005094243505, 0.5, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 2, 0, 0]'),\n",
              " Text(0.26343352012226184, 0.5, 'X[3] <= 3.75\\ngini = 0.694\\nsamples = 7\\nvalue = [1, 2, 1, 0, 3]'),\n",
              " Text(0.2530005094243505, 0.4473684210526316, 'X[3] <= 3.1\\ngini = 0.667\\nsamples = 3\\nvalue = [1, 1, 1, 0, 0]'),\n",
              " Text(0.2477840040753948, 0.39473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.25821701477330616, 0.39473684210526316, 'gini = 0.5\\nsamples = 2\\nvalue = [1, 0, 1, 0, 0]'),\n",
              " Text(0.2738665308201732, 0.4473684210526316, 'X[1] <= 8.05\\ngini = 0.375\\nsamples = 4\\nvalue = [0, 1, 0, 0, 3]'),\n",
              " Text(0.2686500254712175, 0.39473684210526316, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.2790830361691289, 0.39473684210526316, 'X[3] <= 4.0\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 1, 0, 0, 1]'),\n",
              " Text(0.2738665308201732, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.28429954151808456, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.26343352012226184, 0.6052631578947368, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 0, 3]'),\n",
              " Text(0.4945899133978604, 0.7105263157894737, 'X[2] <= 10.3\\ngini = 0.449\\nsamples = 152\\nvalue = [9, 15, 18, 0, 110]'),\n",
              " Text(0.3918899643402955, 0.6578947368421053, 'X[3] <= 2.85\\ngini = 0.484\\nsamples = 131\\nvalue = [8, 15, 17, 0, 91]'),\n",
              " Text(0.30973000509424353, 0.6052631578947368, 'X[1] <= 9.7\\ngini = 0.418\\nsamples = 59\\nvalue = [4, 8, 3, 0, 44]'),\n",
              " Text(0.2947325522159959, 0.5526315789473685, 'X[2] <= 1.4\\ngini = 0.611\\nsamples = 6\\nvalue = [2, 0, 1, 0, 3]'),\n",
              " Text(0.28951604686704024, 0.5, 'X[3] <= 2.1\\ngini = 0.375\\nsamples = 4\\nvalue = [0, 0, 1, 0, 3]'),\n",
              " Text(0.28429954151808456, 0.4473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.2947325522159959, 0.4473684210526316, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 0, 3]'),\n",
              " Text(0.2999490575649516, 0.5, 'gini = 0.0\\nsamples = 2\\nvalue = [2, 0, 0, 0, 0]'),\n",
              " Text(0.3247274579724911, 0.5526315789473685, 'X[1] <= 12.5\\ngini = 0.376\\nsamples = 53\\nvalue = [2, 8, 2, 0, 41]'),\n",
              " Text(0.31038206826286296, 0.5, 'X[2] <= 6.15\\ngini = 0.124\\nsamples = 15\\nvalue = [0, 0, 1, 0, 14]'),\n",
              " Text(0.3051655629139073, 0.4473684210526316, 'gini = 0.0\\nsamples = 11\\nvalue = [0, 0, 0, 0, 11]'),\n",
              " Text(0.31559857361181864, 0.4473684210526316, 'X[2] <= 7.25\\ngini = 0.375\\nsamples = 4\\nvalue = [0, 0, 1, 0, 3]'),\n",
              " Text(0.31038206826286296, 0.39473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.3208150789607743, 0.39473684210526316, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 0, 3]'),\n",
              " Text(0.3390728476821192, 0.5, 'X[2] <= 2.5\\ngini = 0.447\\nsamples = 38\\nvalue = [2, 8, 1, 0, 27]'),\n",
              " Text(0.3338563423331635, 0.4473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.3442893530310749, 0.4473684210526316, 'X[2] <= 4.7\\ngini = 0.418\\nsamples = 37\\nvalue = [2, 8, 0, 0, 27]'),\n",
              " Text(0.3312480896586857, 0.39473684210526316, 'X[1] <= 13.6\\ngini = 0.494\\nsamples = 9\\nvalue = [0, 4, 0, 0, 5]'),\n",
              " Text(0.32603158430973, 0.34210526315789475, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.33646459500764136, 0.34210526315789475, 'X[1] <= 15.85\\ngini = 0.49\\nsamples = 7\\nvalue = [0, 4, 0, 0, 3]'),\n",
              " Text(0.3312480896586857, 0.2894736842105263, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 3, 0, 0, 0]'),\n",
              " Text(0.34168110035659705, 0.2894736842105263, 'X[2] <= 4.15\\ngini = 0.375\\nsamples = 4\\nvalue = [0, 1, 0, 0, 3]'),\n",
              " Text(0.33646459500764136, 0.23684210526315788, 'X[2] <= 3.35\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 1, 0, 0, 1]'),\n",
              " Text(0.3312480896586857, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.34168110035659705, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.3468976057055527, 0.23684210526315788, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.3573306164034641, 0.39473684210526316, 'X[1] <= 13.05\\ngini = 0.357\\nsamples = 28\\nvalue = [2, 4, 0, 0, 22]'),\n",
              " Text(0.3521141110545084, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.36254712175241977, 0.34210526315789475, 'X[1] <= 15.85\\ngini = 0.318\\nsamples = 27\\nvalue = [2, 3, 0, 0, 22]'),\n",
              " Text(0.3573306164034641, 0.2894736842105263, 'gini = 0.0\\nsamples = 11\\nvalue = [0, 0, 0, 0, 11]'),\n",
              " Text(0.36776362710137545, 0.2894736842105263, 'X[1] <= 16.4\\ngini = 0.477\\nsamples = 16\\nvalue = [2, 3, 0, 0, 11]'),\n",
              " Text(0.3573306164034641, 0.23684210526315788, 'X[2] <= 7.2\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 2, 0, 0, 0]'),\n",
              " Text(0.3521141110545084, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.36254712175241977, 0.18421052631578946, 'X[3] <= 2.6\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 1, 0, 0, 0]'),\n",
              " Text(0.3573306164034641, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.36776362710137545, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.3781966377992868, 0.23684210526315788, 'X[1] <= 18.05\\ngini = 0.272\\nsamples = 13\\nvalue = [1, 1, 0, 0, 11]'),\n",
              " Text(0.3729801324503311, 0.18421052631578946, 'gini = 0.0\\nsamples = 9\\nvalue = [0, 0, 0, 0, 9]'),\n",
              " Text(0.3834131431482425, 0.18421052631578946, 'X[2] <= 8.6\\ngini = 0.625\\nsamples = 4\\nvalue = [1, 1, 0, 0, 2]'),\n",
              " Text(0.3781966377992868, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.38862964849719817, 0.13157894736842105, 'X[2] <= 9.7\\ngini = 0.667\\nsamples = 3\\nvalue = [1, 1, 0, 0, 1]'),\n",
              " Text(0.3834131431482425, 0.07894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.39384615384615385, 0.07894736842105263, 'X[3] <= 2.65\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.38862964849719817, 0.02631578947368421, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.3990626591951095, 0.02631578947368421, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.47404992358634745, 0.6052631578947368, 'X[3] <= 3.5\\ngini = 0.524\\nsamples = 72\\nvalue = [4, 7, 14, 0, 47]'),\n",
              " Text(0.40819154355578197, 0.5526315789473685, 'X[3] <= 3.15\\ngini = 0.609\\nsamples = 23\\nvalue = [1, 2, 9, 0, 11]'),\n",
              " Text(0.3860213958227203, 0.5, 'X[2] <= 5.0\\ngini = 0.531\\nsamples = 16\\nvalue = [0, 2, 4, 0, 10]'),\n",
              " Text(0.3729801324503311, 0.4473684210526316, 'X[1] <= 10.55\\ngini = 0.219\\nsamples = 8\\nvalue = [0, 1, 0, 0, 7]'),\n",
              " Text(0.36776362710137545, 0.39473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.3781966377992868, 0.39473684210526316, 'gini = 0.0\\nsamples = 7\\nvalue = [0, 0, 0, 0, 7]'),\n",
              " Text(0.3990626591951095, 0.4473684210526316, 'X[2] <= 8.35\\ngini = 0.594\\nsamples = 8\\nvalue = [0, 1, 4, 0, 3]'),\n",
              " Text(0.38862964849719817, 0.39473684210526316, 'X[1] <= 15.0\\ngini = 0.32\\nsamples = 5\\nvalue = [0, 0, 4, 0, 1]'),\n",
              " Text(0.3834131431482425, 0.34210526315789475, 'X[3] <= 2.95\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 0, 1, 0, 1]'),\n",
              " Text(0.3781966377992868, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.38862964849719817, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.39384615384615385, 0.34210526315789475, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 3, 0, 0]'),\n",
              " Text(0.4094956698930209, 0.39473684210526316, 'X[2] <= 9.7\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 1, 0, 0, 2]'),\n",
              " Text(0.4042791645440652, 0.34210526315789475, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.41471217524197657, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.4303616912888436, 0.5, 'X[2] <= 7.5\\ngini = 0.449\\nsamples = 7\\nvalue = [1, 0, 5, 0, 1]'),\n",
              " Text(0.4251451859398879, 0.4473684210526316, 'X[1] <= 13.6\\ngini = 0.625\\nsamples = 4\\nvalue = [1, 0, 2, 0, 1]'),\n",
              " Text(0.41992868059093225, 0.39473684210526316, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 2, 0, 0]'),\n",
              " Text(0.4303616912888436, 0.39473684210526316, 'X[1] <= 15.55\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.4251451859398879, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.4355781966377993, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.4355781966377993, 0.4473684210526316, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 3, 0, 0]'),\n",
              " Text(0.5399083036169129, 0.5526315789473685, 'X[1] <= 15.3\\ngini = 0.436\\nsamples = 49\\nvalue = [3, 5, 5, 0, 36]'),\n",
              " Text(0.5138257768721345, 0.5, 'X[1] <= 14.7\\ngini = 0.517\\nsamples = 36\\nvalue = [3, 5, 4, 0, 24]'),\n",
              " Text(0.4773102394294447, 0.4473684210526316, 'X[2] <= 3.05\\ngini = 0.455\\nsamples = 32\\nvalue = [2, 3, 4, 0, 23]'),\n",
              " Text(0.4512277126846663, 0.39473684210526316, 'X[1] <= 10.3\\ngini = 0.48\\nsamples = 5\\nvalue = [0, 2, 0, 0, 3]'),\n",
              " Text(0.44601120733571065, 0.34210526315789475, 'X[1] <= 9.15\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 2, 0, 0, 1]'),\n",
              " Text(0.44079470198675497, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.4512277126846663, 0.2894736842105263, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.456444218033622, 0.34210526315789475, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.5033927661742231, 0.39473684210526316, 'X[1] <= 12.5\\ngini = 0.422\\nsamples = 27\\nvalue = [2, 1, 4, 0, 20]'),\n",
              " Text(0.4773102394294447, 0.34210526315789475, 'X[3] <= 5.35\\ngini = 0.304\\nsamples = 17\\nvalue = [0, 1, 2, 0, 14]'),\n",
              " Text(0.4616607233825777, 0.2894736842105263, 'X[1] <= 11.4\\ngini = 0.165\\nsamples = 11\\nvalue = [0, 1, 0, 0, 10]'),\n",
              " Text(0.456444218033622, 0.23684210526315788, 'gini = 0.0\\nsamples = 6\\nvalue = [0, 0, 0, 0, 6]'),\n",
              " Text(0.46687722873153337, 0.23684210526315788, 'X[2] <= 4.75\\ngini = 0.32\\nsamples = 5\\nvalue = [0, 1, 0, 0, 4]'),\n",
              " Text(0.4616607233825777, 0.18421052631578946, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 0, 3]'),\n",
              " Text(0.47209373408048905, 0.18421052631578946, 'X[1] <= 11.95\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 1, 0, 0, 1]'),\n",
              " Text(0.46687722873153337, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.4773102394294447, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.49295975547631177, 0.2894736842105263, 'X[3] <= 6.0\\ngini = 0.444\\nsamples = 6\\nvalue = [0, 0, 2, 0, 4]'),\n",
              " Text(0.4877432501273561, 0.23684210526315788, 'X[1] <= 11.95\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 0, 2, 0, 1]'),\n",
              " Text(0.4825267447784004, 0.18421052631578946, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 2, 0, 0]'),\n",
              " Text(0.49295975547631177, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.49817626082526745, 0.23684210526315788, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 0, 3]'),\n",
              " Text(0.5294752929190015, 0.34210526315789475, 'X[1] <= 13.05\\ngini = 0.56\\nsamples = 10\\nvalue = [2, 0, 2, 0, 6]'),\n",
              " Text(0.5138257768721345, 0.2894736842105263, 'X[2] <= 5.55\\ngini = 0.444\\nsamples = 3\\nvalue = [2, 0, 0, 0, 1]'),\n",
              " Text(0.5086092715231788, 0.23684210526315788, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.5190422822210902, 0.23684210526315788, 'X[3] <= 4.5\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.5138257768721345, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.5242587875700458, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.5451248089658686, 0.2894736842105263, 'X[2] <= 8.6\\ngini = 0.408\\nsamples = 7\\nvalue = [0, 0, 2, 0, 5]'),\n",
              " Text(0.5399083036169129, 0.23684210526315788, 'X[3] <= 4.05\\ngini = 0.278\\nsamples = 6\\nvalue = [0, 0, 1, 0, 5]'),\n",
              " Text(0.5346917982679572, 0.18421052631578946, 'X[3] <= 3.75\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 0, 1, 0, 1]'),\n",
              " Text(0.5294752929190015, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.5399083036169129, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.5451248089658686, 0.18421052631578946, 'gini = 0.0\\nsamples = 4\\nvalue = [0, 0, 0, 0, 4]'),\n",
              " Text(0.5503413143148242, 0.23684210526315788, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.5503413143148242, 0.4473684210526316, 'X[3] <= 4.5\\ngini = 0.625\\nsamples = 4\\nvalue = [1, 2, 0, 0, 1]'),\n",
              " Text(0.5451248089658686, 0.39473684210526316, 'X[2] <= 5.3\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.5399083036169129, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.5503413143148242, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.5555578196637799, 0.39473684210526316, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.5659908303616913, 0.5, 'X[2] <= 8.05\\ngini = 0.142\\nsamples = 13\\nvalue = [0, 0, 1, 0, 12]'),\n",
              " Text(0.5607743250127356, 0.4473684210526316, 'gini = 0.0\\nsamples = 9\\nvalue = [0, 0, 0, 0, 9]'),\n",
              " Text(0.571207335710647, 0.4473684210526316, 'X[3] <= 5.0\\ngini = 0.375\\nsamples = 4\\nvalue = [0, 0, 1, 0, 3]'),\n",
              " Text(0.5659908303616913, 0.39473684210526316, 'X[3] <= 4.15\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 0, 1, 0, 1]'),\n",
              " Text(0.5607743250127356, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.571207335710647, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.5764238410596026, 0.39473684210526316, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.5972898624554254, 0.6578947368421053, 'X[2] <= 12.25\\ngini = 0.177\\nsamples = 21\\nvalue = [1, 0, 1, 0, 19]'),\n",
              " Text(0.586856851757514, 0.6052631578947368, 'X[2] <= 10.85\\ngini = 0.1\\nsamples = 19\\nvalue = [0, 0, 1, 0, 18]'),\n",
              " Text(0.5816403464085583, 0.5526315789473685, 'X[1] <= 18.05\\ngini = 0.245\\nsamples = 7\\nvalue = [0, 0, 1, 0, 6]'),\n",
              " Text(0.5764238410596026, 0.5, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 0, 3]'),\n",
              " Text(0.586856851757514, 0.5, 'X[3] <= 3.15\\ngini = 0.375\\nsamples = 4\\nvalue = [0, 0, 1, 0, 3]'),\n",
              " Text(0.5816403464085583, 0.4473684210526316, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.5920733571064697, 0.4473684210526316, 'X[3] <= 4.05\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 0, 1, 0, 1]'),\n",
              " Text(0.586856851757514, 0.39473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.5972898624554254, 0.39473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.5920733571064697, 0.5526315789473685, 'gini = 0.0\\nsamples = 12\\nvalue = [0, 0, 0, 0, 12]'),\n",
              " Text(0.6077228731533367, 0.6052631578947368, 'X[1] <= 16.95\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.602506367804381, 0.5526315789473685, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.6129393785022924, 0.5526315789473685, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.762129393785023, 0.8157894736842105, 'X[3] <= 2.45\\ngini = 0.259\\nsamples = 299\\nvalue = [14, 22, 7, 0, 256]'),\n",
              " Text(0.6285888945491594, 0.7631578947368421, 'X[3] <= 2.15\\ngini = 0.356\\nsamples = 67\\nvalue = [4, 8, 2, 0, 53]'),\n",
              " Text(0.6181558838512481, 0.7105263157894737, 'X[1] <= 31.15\\ngini = 0.087\\nsamples = 22\\nvalue = [1, 0, 0, 0, 21]'),\n",
              " Text(0.6129393785022924, 0.6578947368421053, 'gini = 0.0\\nsamples = 20\\nvalue = [0, 0, 0, 0, 20]'),\n",
              " Text(0.6233723892002038, 0.6578947368421053, 'X[2] <= 16.4\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.6181558838512481, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.6285888945491594, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.6390219052470708, 0.7105263157894737, 'X[2] <= 10.85\\ngini = 0.456\\nsamples = 45\\nvalue = [3, 8, 2, 0, 32]'),\n",
              " Text(0.6338053998981151, 0.6578947368421053, 'gini = 0.0\\nsamples = 7\\nvalue = [0, 0, 0, 0, 7]'),\n",
              " Text(0.6442384105960265, 0.6578947368421053, 'X[1] <= 29.75\\ngini = 0.514\\nsamples = 38\\nvalue = [3, 8, 2, 0, 25]'),\n",
              " Text(0.6390219052470708, 0.6052631578947368, 'X[1] <= 28.6\\ngini = 0.562\\nsamples = 33\\nvalue = [3, 8, 2, 0, 20]'),\n",
              " Text(0.6338053998981151, 0.5526315789473685, 'X[1] <= 21.95\\ngini = 0.533\\nsamples = 31\\nvalue = [3, 6, 2, 0, 20]'),\n",
              " Text(0.6194600101884871, 0.5, 'X[2] <= 13.6\\ngini = 0.64\\nsamples = 5\\nvalue = [0, 2, 1, 0, 2]'),\n",
              " Text(0.6142435048395314, 0.4473684210526316, 'X[1] <= 20.85\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 0, 1, 0, 2]'),\n",
              " Text(0.6090269994905757, 0.39473684210526316, 'X[2] <= 11.95\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 0, 1, 0, 1]'),\n",
              " Text(0.60381049414162, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.6142435048395314, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.6194600101884871, 0.39473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.6246765155374427, 0.4473684210526316, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.6481507896077433, 0.5, 'X[1] <= 23.6\\ngini = 0.482\\nsamples = 26\\nvalue = [3, 4, 1, 0, 18]'),\n",
              " Text(0.6429342842587876, 0.4473684210526316, 'gini = 0.0\\nsamples = 5\\nvalue = [0, 0, 0, 0, 5]'),\n",
              " Text(0.653367294956699, 0.4473684210526316, 'X[2] <= 13.6\\ngini = 0.558\\nsamples = 21\\nvalue = [3, 4, 1, 0, 13]'),\n",
              " Text(0.6351095262353541, 0.39473684210526316, 'X[1] <= 25.3\\ngini = 0.645\\nsamples = 11\\nvalue = [3, 3, 0, 0, 5]'),\n",
              " Text(0.6246765155374427, 0.34210526315789475, 'X[1] <= 24.45\\ngini = 0.48\\nsamples = 5\\nvalue = [2, 0, 0, 0, 3]'),\n",
              " Text(0.6194600101884871, 0.2894736842105263, 'X[3] <= 2.25\\ngini = 0.444\\nsamples = 3\\nvalue = [2, 0, 0, 0, 1]'),\n",
              " Text(0.6142435048395314, 0.23684210526315788, 'gini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.6246765155374427, 0.23684210526315788, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.6298930208863984, 0.2894736842105263, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.6455425369332655, 0.34210526315789475, 'X[3] <= 2.35\\ngini = 0.611\\nsamples = 6\\nvalue = [1, 3, 0, 0, 2]'),\n",
              " Text(0.6403260315843098, 0.2894736842105263, 'X[1] <= 26.95\\ngini = 0.625\\nsamples = 4\\nvalue = [1, 1, 0, 0, 2]'),\n",
              " Text(0.6351095262353541, 0.23684210526315788, 'X[1] <= 25.85\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 0, 0, 0, 2]'),\n",
              " Text(0.6298930208863984, 0.18421052631578946, 'X[3] <= 2.25\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.6246765155374427, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.6351095262353541, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.6403260315843098, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.6455425369332655, 0.23684210526315788, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.6507590422822211, 0.2894736842105263, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.6716250636780439, 0.39473684210526316, 'X[1] <= 25.55\\ngini = 0.34\\nsamples = 10\\nvalue = [0, 1, 1, 0, 8]'),\n",
              " Text(0.6664085583290882, 0.34210526315789475, 'X[2] <= 15.3\\ngini = 0.56\\nsamples = 5\\nvalue = [0, 1, 1, 0, 3]'),\n",
              " Text(0.6611920529801325, 0.2894736842105263, 'X[2] <= 14.7\\ngini = 0.375\\nsamples = 4\\nvalue = [0, 0, 1, 0, 3]'),\n",
              " Text(0.6559755476311768, 0.23684210526315788, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.6664085583290882, 0.23684210526315788, 'X[3] <= 2.3\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 0, 1, 0, 1]'),\n",
              " Text(0.6611920529801325, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.6716250636780439, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.6716250636780439, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.6768415690269995, 0.34210526315789475, 'gini = 0.0\\nsamples = 5\\nvalue = [0, 0, 0, 0, 5]'),\n",
              " Text(0.6442384105960265, 0.5526315789473685, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.6494549159449822, 0.6052631578947368, 'gini = 0.0\\nsamples = 5\\nvalue = [0, 0, 0, 0, 5]'),\n",
              " Text(0.8956698930208864, 0.7631578947368421, 'X[1] <= 30.85\\ngini = 0.228\\nsamples = 232\\nvalue = [10, 14, 5, 0, 203]'),\n",
              " Text(0.8904533876719307, 0.7105263157894737, 'X[2] <= 17.5\\ngini = 0.249\\nsamples = 211\\nvalue = [10, 14, 5, 0, 182]'),\n",
              " Text(0.8622312786551197, 0.6578947368421053, 'X[2] <= 5.85\\ngini = 0.243\\nsamples = 209\\nvalue = [10, 13, 5, 0, 181]'),\n",
              " Text(0.8214365766683648, 0.6052631578947368, 'X[3] <= 3.75\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 0, 0, 0, 2]'),\n",
              " Text(0.8162200713194091, 0.5526315789473685, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.8266530820173205, 0.5526315789473685, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.9030259806418747, 0.6052631578947368, 'X[3] <= 3.65\\ngini = 0.238\\nsamples = 206\\nvalue = [9, 13, 5, 0, 179]'),\n",
              " Text(0.8370860927152318, 0.5526315789473685, 'X[3] <= 3.35\\ngini = 0.274\\nsamples = 150\\nvalue = [8, 11, 4, 0, 127]'),\n",
              " Text(0.7678043810494142, 0.5, 'X[2] <= 12.5\\ngini = 0.254\\nsamples = 121\\nvalue = [7, 6, 4, 0, 104]'),\n",
              " Text(0.7381355068772287, 0.4473684210526316, 'X[3] <= 3.05\\ngini = 0.351\\nsamples = 54\\nvalue = [3, 5, 3, 0, 43]'),\n",
              " Text(0.7211818644931228, 0.39473684210526316, 'X[3] <= 2.55\\ngini = 0.263\\nsamples = 41\\nvalue = [2, 3, 1, 0, 35]'),\n",
              " Text(0.702924095771778, 0.34210526315789475, 'X[1] <= 25.55\\ngini = 0.46\\nsamples = 10\\nvalue = [2, 1, 0, 0, 7]'),\n",
              " Text(0.6977075904228223, 0.2894736842105263, 'X[1] <= 19.7\\ngini = 0.37\\nsamples = 9\\nvalue = [1, 1, 0, 0, 7]'),\n",
              " Text(0.6872745797249109, 0.23684210526315788, 'X[2] <= 10.55\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.6820580743759552, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.6924910850738666, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.7081406011207336, 0.23684210526315788, 'X[1] <= 22.5\\ngini = 0.245\\nsamples = 7\\nvalue = [0, 1, 0, 0, 6]'),\n",
              " Text(0.702924095771778, 0.18421052631578946, 'X[1] <= 21.65\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 1, 0, 0, 2]'),\n",
              " Text(0.6977075904228223, 0.13157894736842105, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.7081406011207336, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.7133571064696893, 0.18421052631578946, 'gini = 0.0\\nsamples = 4\\nvalue = [0, 0, 0, 0, 4]'),\n",
              " Text(0.7081406011207336, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.7394396332144677, 0.34210526315789475, 'X[3] <= 2.85\\ngini = 0.179\\nsamples = 31\\nvalue = [0, 2, 1, 0, 28]'),\n",
              " Text(0.734223127865512, 0.2894736842105263, 'X[1] <= 23.6\\ngini = 0.29\\nsamples = 18\\nvalue = [0, 2, 1, 0, 15]'),\n",
              " Text(0.7290066225165563, 0.23684210526315788, 'X[1] <= 23.05\\ngini = 0.43\\nsamples = 11\\nvalue = [0, 2, 1, 0, 8]'),\n",
              " Text(0.7237901171676007, 0.18421052631578946, 'X[3] <= 2.65\\ngini = 0.32\\nsamples = 10\\nvalue = [0, 2, 0, 0, 8]'),\n",
              " Text(0.718573611818645, 0.13157894736842105, 'gini = 0.0\\nsamples = 5\\nvalue = [0, 0, 0, 0, 5]'),\n",
              " Text(0.7290066225165563, 0.13157894736842105, 'X[1] <= 19.7\\ngini = 0.48\\nsamples = 5\\nvalue = [0, 2, 0, 0, 3]'),\n",
              " Text(0.7237901171676007, 0.07894736842105263, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.734223127865512, 0.07894736842105263, 'X[1] <= 21.95\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 2, 0, 0, 1]'),\n",
              " Text(0.7290066225165563, 0.02631578947368421, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.7394396332144677, 0.02631578947368421, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.734223127865512, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.7394396332144677, 0.23684210526315788, 'gini = 0.0\\nsamples = 7\\nvalue = [0, 0, 0, 0, 7]'),\n",
              " Text(0.7446561385634234, 0.2894736842105263, 'gini = 0.0\\nsamples = 13\\nvalue = [0, 0, 0, 0, 13]'),\n",
              " Text(0.7550891492613347, 0.39473684210526316, 'X[1] <= 19.45\\ngini = 0.568\\nsamples = 13\\nvalue = [1, 2, 2, 0, 8]'),\n",
              " Text(0.7498726439123791, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.7603056546102904, 0.34210526315789475, 'X[3] <= 3.25\\ngini = 0.514\\nsamples = 12\\nvalue = [1, 2, 1, 0, 8]'),\n",
              " Text(0.7550891492613347, 0.2894736842105263, 'X[1] <= 20.3\\ngini = 0.617\\nsamples = 9\\nvalue = [1, 2, 1, 0, 5]'),\n",
              " Text(0.7498726439123791, 0.23684210526315788, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.7603056546102904, 0.23684210526315788, 'X[1] <= 24.7\\ngini = 0.694\\nsamples = 7\\nvalue = [1, 2, 1, 0, 3]'),\n",
              " Text(0.7550891492613347, 0.18421052631578946, 'X[2] <= 10.85\\ngini = 0.72\\nsamples = 5\\nvalue = [1, 2, 1, 0, 1]'),\n",
              " Text(0.7498726439123791, 0.13157894736842105, 'X[2] <= 8.35\\ngini = 0.667\\nsamples = 3\\nvalue = [1, 0, 1, 0, 1]'),\n",
              " Text(0.7446561385634234, 0.07894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.7550891492613347, 0.07894736842105263, 'X[1] <= 23.3\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 1, 0, 0]'),\n",
              " Text(0.7498726439123791, 0.02631578947368421, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.7603056546102904, 0.02631578947368421, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.7603056546102904, 0.13157894736842105, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 2, 0, 0, 0]'),\n",
              " Text(0.7655221599592461, 0.18421052631578946, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.7655221599592461, 0.2894736842105263, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 0, 3]'),\n",
              " Text(0.7974732552215996, 0.4473684210526316, 'X[2] <= 14.15\\ngini = 0.167\\nsamples = 67\\nvalue = [4, 1, 1, 0, 61]'),\n",
              " Text(0.7759551706571575, 0.39473684210526316, 'X[1] <= 25.3\\ngini = 0.059\\nsamples = 33\\nvalue = [1, 0, 0, 0, 32]'),\n",
              " Text(0.7707386653082018, 0.34210526315789475, 'gini = 0.0\\nsamples = 22\\nvalue = [0, 0, 0, 0, 22]'),\n",
              " Text(0.7811716760061131, 0.34210526315789475, 'X[1] <= 25.85\\ngini = 0.165\\nsamples = 11\\nvalue = [1, 0, 0, 0, 10]'),\n",
              " Text(0.7759551706571575, 0.2894736842105263, 'X[3] <= 2.65\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 0, 0, 0, 2]'),\n",
              " Text(0.7707386653082018, 0.23684210526315788, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.7811716760061131, 0.23684210526315788, 'X[3] <= 2.85\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.7759551706571575, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.7863881813550688, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.7863881813550688, 0.2894736842105263, 'gini = 0.0\\nsamples = 8\\nvalue = [0, 0, 0, 0, 8]'),\n",
              " Text(0.8189913397860418, 0.39473684210526316, 'X[1] <= 21.95\\ngini = 0.263\\nsamples = 34\\nvalue = [3, 1, 1, 0, 29]'),\n",
              " Text(0.8020376974019359, 0.34210526315789475, 'X[2] <= 14.7\\ngini = 0.5\\nsamples = 4\\nvalue = [2, 0, 0, 0, 2]'),\n",
              " Text(0.7968211920529802, 0.2894736842105263, 'X[3] <= 2.95\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 0, 0, 0, 2]'),\n",
              " Text(0.7916046867040245, 0.23684210526315788, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.8020376974019359, 0.23684210526315788, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.8072542027508915, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.8359449821701478, 0.34210526315789475, 'X[2] <= 14.7\\ngini = 0.187\\nsamples = 30\\nvalue = [1, 1, 1, 0, 27]'),\n",
              " Text(0.8229037187977586, 0.2894736842105263, 'X[3] <= 2.75\\ngini = 0.5\\nsamples = 6\\nvalue = [0, 1, 1, 0, 4]'),\n",
              " Text(0.8124707080998472, 0.23684210526315788, 'X[1] <= 25.25\\ngini = 0.375\\nsamples = 4\\nvalue = [0, 1, 0, 0, 3]'),\n",
              " Text(0.8072542027508915, 0.18421052631578946, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.8176872134488029, 0.18421052631578946, 'X[1] <= 27.5\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 1, 0, 0, 1]'),\n",
              " Text(0.8124707080998472, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.8229037187977586, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.83333672949567, 0.23684210526315788, 'X[1] <= 27.5\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 0, 1, 0, 1]'),\n",
              " Text(0.8281202241467143, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.8385532348446256, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.848986245542537, 0.2894736842105263, 'X[3] <= 3.15\\ngini = 0.08\\nsamples = 24\\nvalue = [1, 0, 0, 0, 23]'),\n",
              " Text(0.8437697401935813, 0.23684210526315788, 'gini = 0.0\\nsamples = 19\\nvalue = [0, 0, 0, 0, 19]'),\n",
              " Text(0.8542027508914927, 0.23684210526315788, 'X[1] <= 29.15\\ngini = 0.32\\nsamples = 5\\nvalue = [1, 0, 0, 0, 4]'),\n",
              " Text(0.848986245542537, 0.18421052631578946, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 0, 0, 3]'),\n",
              " Text(0.8594192562404483, 0.18421052631578946, 'X[3] <= 3.25\\ngini = 0.5\\nsamples = 2\\nvalue = [1, 0, 0, 0, 1]'),\n",
              " Text(0.8542027508914927, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.864635761589404, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.9063678043810495, 0.5, 'X[2] <= 15.85\\ngini = 0.34\\nsamples = 29\\nvalue = [1, 5, 0, 0, 23]'),\n",
              " Text(0.9011512990320938, 0.4473684210526316, 'X[2] <= 14.7\\ngini = 0.293\\nsamples = 28\\nvalue = [0, 5, 0, 0, 23]'),\n",
              " Text(0.8907182883341824, 0.39473684210526316, 'X[1] <= 25.3\\ngini = 0.219\\nsamples = 24\\nvalue = [0, 3, 0, 0, 21]'),\n",
              " Text(0.8855017829852267, 0.34210526315789475, 'X[1] <= 24.7\\ngini = 0.32\\nsamples = 15\\nvalue = [0, 3, 0, 0, 12]'),\n",
              " Text(0.8802852776362711, 0.2894736842105263, 'X[3] <= 3.45\\ngini = 0.245\\nsamples = 14\\nvalue = [0, 2, 0, 0, 12]'),\n",
              " Text(0.8750687722873154, 0.23684210526315788, 'X[1] <= 20.0\\ngini = 0.48\\nsamples = 5\\nvalue = [0, 2, 0, 0, 3]'),\n",
              " Text(0.8698522669383597, 0.18421052631578946, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.8802852776362711, 0.18421052631578946, 'X[2] <= 8.05\\ngini = 0.5\\nsamples = 4\\nvalue = [0, 2, 0, 0, 2]'),\n",
              " Text(0.8750687722873154, 0.13157894736842105, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.8855017829852267, 0.13157894736842105, 'X[2] <= 10.8\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 2, 0, 0, 1]'),\n",
              " Text(0.8802852776362711, 0.07894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.8907182883341824, 0.07894736842105263, 'gini = 0.5\\nsamples = 2\\nvalue = [0, 1, 0, 0, 1]'),\n",
              " Text(0.8855017829852267, 0.23684210526315788, 'gini = 0.0\\nsamples = 9\\nvalue = [0, 0, 0, 0, 9]'),\n",
              " Text(0.8907182883341824, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.8959347936831381, 0.34210526315789475, 'gini = 0.0\\nsamples = 9\\nvalue = [0, 0, 0, 0, 9]'),\n",
              " Text(0.9115843097300051, 0.39473684210526316, 'X[1] <= 23.9\\ngini = 0.5\\nsamples = 4\\nvalue = [0, 2, 0, 0, 2]'),\n",
              " Text(0.9063678043810495, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.9168008150789608, 0.34210526315789475, 'X[3] <= 3.45\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 2, 0, 0, 1]'),\n",
              " Text(0.9115843097300051, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.9220173204279165, 0.2894736842105263, 'X[3] <= 3.55\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 1, 0, 0, 1]'),\n",
              " Text(0.9168008150789608, 0.23684210526315788, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.9272338257768722, 0.23684210526315788, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.9115843097300051, 0.4473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.9689658685685176, 0.5526315789473685, 'X[3] <= 6.2\\ngini = 0.136\\nsamples = 56\\nvalue = [1, 2, 1, 0, 52]'),\n",
              " Text(0.9533163525216506, 0.5, 'X[2] <= 14.15\\ngini = 0.109\\nsamples = 53\\nvalue = [1, 1, 1, 0, 50]'),\n",
              " Text(0.9376668364747835, 0.4473684210526316, 'X[2] <= 9.7\\ngini = 0.053\\nsamples = 37\\nvalue = [1, 0, 0, 0, 36]'),\n",
              " Text(0.9324503311258279, 0.39473684210526316, 'X[1] <= 24.15\\ngini = 0.153\\nsamples = 12\\nvalue = [1, 0, 0, 0, 11]'),\n",
              " Text(0.9272338257768722, 0.34210526315789475, 'gini = 0.0\\nsamples = 9\\nvalue = [0, 0, 0, 0, 9]'),\n",
              " Text(0.9376668364747835, 0.34210526315789475, 'X[1] <= 25.0\\ngini = 0.444\\nsamples = 3\\nvalue = [1, 0, 0, 0, 2]'),\n",
              " Text(0.9324503311258279, 0.2894736842105263, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0, 0, 0, 0]'),\n",
              " Text(0.9428833418237392, 0.2894736842105263, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.9428833418237392, 0.39473684210526316, 'gini = 0.0\\nsamples = 25\\nvalue = [0, 0, 0, 0, 25]'),\n",
              " Text(0.9689658685685176, 0.4473684210526316, 'X[1] <= 24.7\\ngini = 0.227\\nsamples = 16\\nvalue = [0, 1, 1, 0, 14]'),\n",
              " Text(0.963749363219562, 0.39473684210526316, 'X[1] <= 23.3\\ngini = 0.5\\nsamples = 6\\nvalue = [0, 1, 1, 0, 4]'),\n",
              " Text(0.9585328578706063, 0.34210526315789475, 'X[3] <= 3.9\\ngini = 0.32\\nsamples = 5\\nvalue = [0, 0, 1, 0, 4]'),\n",
              " Text(0.9533163525216506, 0.2894736842105263, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.963749363219562, 0.2894736842105263, 'X[3] <= 4.2\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 0, 1, 0, 2]'),\n",
              " Text(0.9585328578706063, 0.23684210526315788, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.9689658685685176, 0.23684210526315788, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.9689658685685176, 0.34210526315789475, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.9741823739174733, 0.39473684210526316, 'gini = 0.0\\nsamples = 10\\nvalue = [0, 0, 0, 0, 10]'),\n",
              " Text(0.9846153846153847, 0.5, 'X[2] <= 12.5\\ngini = 0.444\\nsamples = 3\\nvalue = [0, 1, 0, 0, 2]'),\n",
              " Text(0.979398879266429, 0.4473684210526316, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
              " Text(0.9898318899643404, 0.4473684210526316, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.9186754966887417, 0.6578947368421053, 'X[1] <= 28.9\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 1, 0, 0, 1]'),\n",
              " Text(0.913458991339786, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1, 0, 0, 0]'),\n",
              " Text(0.9238920020376974, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 0, 1]'),\n",
              " Text(0.9008863983698421, 0.7105263157894737, 'gini = 0.0\\nsamples = 21\\nvalue = [0, 0, 0, 0, 21]'),\n",
              " Text(0.9465308201732042, 0.9210526315789473, 'X[2] <= 0.85\\ngini = 0.075\\nsamples = 464\\nvalue = [0, 0, 446, 18, 0]'),\n",
              " Text(0.9217524197656648, 0.868421052631579, 'X[0] <= 3.15\\ngini = 0.463\\nsamples = 22\\nvalue = [0, 0, 8, 14, 0]'),\n",
              " Text(0.9113194090677534, 0.8157894736842105, 'X[1] <= 4.45\\ngini = 0.245\\nsamples = 7\\nvalue = [0, 0, 6, 1, 0]'),\n",
              " Text(0.9061029037187978, 0.7631578947368421, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 1, 0]'),\n",
              " Text(0.9165359144167091, 0.7631578947368421, 'gini = 0.0\\nsamples = 6\\nvalue = [0, 0, 6, 0, 0]'),\n",
              " Text(0.9321854304635762, 0.8157894736842105, 'X[3] <= 3.1\\ngini = 0.231\\nsamples = 15\\nvalue = [0, 0, 2, 13, 0]'),\n",
              " Text(0.9269689251146205, 0.7631578947368421, 'X[0] <= 8.8\\ngini = 0.5\\nsamples = 4\\nvalue = [0, 0, 2, 2, 0]'),\n",
              " Text(0.9217524197656648, 0.7105263157894737, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 2, 0, 0]'),\n",
              " Text(0.9321854304635762, 0.7105263157894737, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 2, 0]'),\n",
              " Text(0.9374019358125318, 0.7631578947368421, 'gini = 0.0\\nsamples = 11\\nvalue = [0, 0, 0, 11, 0]'),\n",
              " Text(0.9713092205807438, 0.868421052631579, 'X[2] <= 3.05\\ngini = 0.018\\nsamples = 442\\nvalue = [0, 0, 438, 4, 0]'),\n",
              " Text(0.9582679572083546, 0.8157894736842105, 'X[0] <= 8.0\\ngini = 0.139\\nsamples = 40\\nvalue = [0, 0, 37, 3, 0]'),\n",
              " Text(0.9478349465104432, 0.7631578947368421, 'X[1] <= 9.15\\ngini = 0.067\\nsamples = 29\\nvalue = [0, 0, 28, 1, 0]'),\n",
              " Text(0.9426184411614875, 0.7105263157894737, 'gini = 0.0\\nsamples = 24\\nvalue = [0, 0, 24, 0, 0]'),\n",
              " Text(0.9530514518593989, 0.7105263157894737, 'X[3] <= 1.95\\ngini = 0.32\\nsamples = 5\\nvalue = [0, 0, 4, 1, 0]'),\n",
              " Text(0.9478349465104432, 0.6578947368421053, 'X[3] <= 1.7\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 0, 1, 1, 0]'),\n",
              " Text(0.9426184411614875, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.9530514518593989, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 1, 0]'),\n",
              " Text(0.9582679572083546, 0.6578947368421053, 'gini = 0.0\\nsamples = 3\\nvalue = [0, 0, 3, 0, 0]'),\n",
              " Text(0.9687009679062659, 0.7631578947368421, 'X[0] <= 8.35\\ngini = 0.298\\nsamples = 11\\nvalue = [0, 0, 9, 2, 0]'),\n",
              " Text(0.9634844625573102, 0.7105263157894737, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 1, 0]'),\n",
              " Text(0.9739174732552216, 0.7105263157894737, 'X[1] <= 6.7\\ngini = 0.18\\nsamples = 10\\nvalue = [0, 0, 9, 1, 0]'),\n",
              " Text(0.9687009679062659, 0.6578947368421053, 'X[2] <= 2.25\\ngini = 0.5\\nsamples = 2\\nvalue = [0, 0, 1, 1, 0]'),\n",
              " Text(0.9634844625573102, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 1, 0, 0]'),\n",
              " Text(0.9739174732552216, 0.6052631578947368, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 1, 0]'),\n",
              " Text(0.9791339786041773, 0.6578947368421053, 'gini = 0.0\\nsamples = 8\\nvalue = [0, 0, 8, 0, 0]'),\n",
              " Text(0.984350483953133, 0.8157894736842105, 'X[0] <= 23.5\\ngini = 0.005\\nsamples = 402\\nvalue = [0, 0, 401, 1, 0]'),\n",
              " Text(0.9791339786041773, 0.7631578947368421, 'gini = 0.0\\nsamples = 374\\nvalue = [0, 0, 374, 0, 0]'),\n",
              " Text(0.9895669893020886, 0.7631578947368421, 'X[0] <= 25.05\\ngini = 0.069\\nsamples = 28\\nvalue = [0, 0, 27, 1, 0]'),\n",
              " Text(0.984350483953133, 0.7105263157894737, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 0, 0, 1, 0]'),\n",
              " Text(0.9947834946510443, 0.7105263157894737, 'gini = 0.0\\nsamples = 27\\nvalue = [0, 0, 27, 0, 0]')]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1YAAAIuCAYAAAC8WplzAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXycd3Xv8c/RMjOSrcWLbFm2bHlPnBUnJDEEkrAmBJICBVKWy942QKGsvUCB5sItLWVpgctelrZQtkISIAQCCYGErDirHe+7tduWZGsf6dw/nkfyWBqts0r6vl8vvWSPZp7njDTzzO/8lvMzd0dERERERESmryDXAYiIiIiIiMx0SqxERERERERSpMRKREREREQkRUqsREREREREUqTESkREREREJEVKrERERERERFKkxEpERERERCRFSqxERERERERSpMRKREREREQkRUqsREREREREUqTESkREREREJEVKrERERERERFKkxEpERERERCRFSqxERERERERSpMRKREREREQkRUqsREREREREUqTESkREREREJEVKrERERCStSkpKGs3MU/kqKSlpzPXzEBGZCnP3XMcgIiIis4iZuQ+e2b649957MTPq6uqIx+O4O21tbbS1tXHFFVeMPkaB4e6WrZhFRFKlESsRERHJuE2bNrFz504ef/xxYrEYDQ0N9Pb2YmZ0dHTkOjwRkZRpxEpERETSxswMGBw5YjXl42jESkRmmKJcByAiIiIzQ5g0LQRWALVjfF+R7LH33HMPTU1NVFVV4e7U1dWxaNEinnzyScyM6upqVq1aNfJ8rcBh4EjC9zP+7e7dmXiuIiJTpcRKREREhpKmBYydMA1972V0snNXwv+PAifvvvtu6urqOHLkCOvXr2f16tUMDAywdu1aTp06xcKFC9m2bRvuzoIFCzhw4ACxWIwdO3YkhrUpSQwvSPj/cjM7lSSexO9HlXyJSDZoKqCIiMgsl5A0TTTS1MfYCcrQCNGpSZxvVPGKEydOsGDBgknFe+LECRYuWjjhVEAzKwAWj/OcaoHlQMcknlfPpIITERmDEisREZEZLEyaKpl4pKmf8Ud2JpU0TUZJSUljT0/P0lSOEYvFmrq7u6tTjSVMvqoY/3czlHxNNPKl5EtExqTESkREJE8lJE3jJQW1BEnTRCMyJ7Md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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred= mytree.predict(X_test)"
      ],
      "metadata": {
        "id": "Y8spxuPioKVB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report,accuracy_score"
      ],
      "metadata": {
        "id": "tg68oKEDq3jF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "score = accuracy_score(y_pred,y_test)\n",
        "print(score)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fyweq0eWrGKK",
        "outputId": "40aa26e5-abb4-45ea-ac2f-95ec54c91483"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7622950819672131\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_pred,y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zNBGJ4kirXb4",
        "outputId": "1e11c36a-af1a-44b9-9dea-162991ec1825"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "     drizzle       0.00      0.00      0.00        14\n",
            "         fog       0.20      0.24      0.22        25\n",
            "        rain       0.93      0.90      0.91       165\n",
            "        snow       0.38      0.38      0.38         8\n",
            "         sun       0.78      0.79      0.78       154\n",
            "\n",
            "    accuracy                           0.76       366\n",
            "   macro avg       0.46      0.46      0.46       366\n",
            "weighted avg       0.77      0.76      0.76       366\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "o64smZjSrhLH"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}